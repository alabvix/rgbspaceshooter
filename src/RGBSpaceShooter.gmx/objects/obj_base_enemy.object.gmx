<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spt_base_obj</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This instance variables can be used in the child instances

_speed_y       = 0 // Sprite speed y axis
_shoot_counter = 0 // Counter for shoot. 
_shoot_in      = 0 // The counter number to shoot. Controlled in child instances
_weapon_type   = 1 // Type of weapon used by the enemy

_points        = 0 // scored points of the enemy
_hp            = 0 // Health points
_type          = 0 // ship_1, ship_2, monster, etc...

_is_cargo_ship = false
_color         = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Points the sprite image to the object direction.
image_angle = direction

// Moves the sprite in Y axis.
y += _speed_y * (delta_time / 100000);// move 100 pixels

// Shoot control
if (_shoot_in != 0 &amp;&amp; global.game_state == global.GAME_STATE_PLAY)
{
    _shoot_counter += 1 * (delta_time / 100000);
    //show_debug_message("Enemy red 1 shoot count:" +string(_shoot_counter));
    if ( round(_shoot_counter) == _shoot_in) {
        switch (_weapon_type) 
        {
            case global.WEAPON_ENERGY_BALL:    
                instance_create(x, y, obj_enemy_weapon_1)
                break
            case global.WEAPON_ENERGY_BALL_SPIN:    
                instance_create(x, y, obj_enemy_weapon_2)
                break
            case global.WEAPON_ENERGY_BALL_STAR:
                sphere1 = instance_create(x, y, obj_enemy_weapon_3)
                sphere2 = instance_create(x, y, obj_enemy_weapon_3)
                sphere3 = instance_create(x, y, obj_enemy_weapon_3)
                sphere4 = instance_create(x, y, obj_enemy_weapon_3)
                
                sphere5 = instance_create(x, y, obj_enemy_weapon_3)
                sphere6 = instance_create(x, y, obj_enemy_weapon_3)
                sphere7 = instance_create(x, y, obj_enemy_weapon_3)
                sphere8 = instance_create(x, y, obj_enemy_weapon_3)
                
                sphere9  = instance_create(x, y, obj_enemy_weapon_3)
                sphere10 = instance_create(x, y, obj_enemy_weapon_3)
                sphere11 = instance_create(x, y, obj_enemy_weapon_3)
                sphere12 = instance_create(x, y, obj_enemy_weapon_3)
                sphere13 = instance_create(x, y, obj_enemy_weapon_3)
                
                sphere14  = instance_create(x, y, obj_enemy_weapon_3)
                sphere15 = instance_create(x, y, obj_enemy_weapon_3)
                sphere16 = instance_create(x, y, obj_enemy_weapon_3)
                
                sspeed = 7
                
                sphere1.direction = 0
                sphere1.speed = sspeed
                
                sphere14.direction = 30
                sphere14.speed = sspeed
                
                sphere5.direction = 45
                sphere5.speed = sspeed
                
                sphere9.direction = 60
                sphere9.speed = sspeed
                                
                sphere2.direction = 90
                sphere2.speed = sspeed
                
                sphere10.direction = 120
                sphere10.speed = sspeed
                
                sphere6.direction = 135
                sphere6.speed = sspeed
                
                sphere11.direction = 150
                sphere11.speed = sspeed
                                
                sphere3.direction = 180
                sphere3.speed = sspeed
                
                sphere15.direction = 210
                sphere15.speed = sspeed
                
                sphere7.direction = 240
                sphere7.speed = sspeed
                
                sphere12.direction = 225
                sphere12.speed = sspeed
                
                sphere4.direction = 270
                sphere4.speed = sspeed
                
                sphere16.direction = 300
                sphere16.speed = sspeed
                
                sphere8.direction = 315
                sphere8.speed = sspeed
                
                sphere13.direction = 330
                sphere13.speed = sspeed
                
                break;         
        }
        _shoot_counter = 0
    }
}    

// Ship 4 moves towards the player ship
if (_type == global.ENEMY_SHIP_4) {
    if ( instance_exists(obj_player_ship)) {
        if (global.game_state == global.GAME_STATE_PLAY) {
            move_towards_point( obj_player_ship.x, obj_player_ship.y, _speed_y );
            image_angle = point_direction(x, y, obj_player_ship.x, obj_player_ship.y);
        }
    }
}
    





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
