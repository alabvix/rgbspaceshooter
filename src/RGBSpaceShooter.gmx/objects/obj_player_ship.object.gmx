<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spt_honey_badger</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_message = ""
_count_to_clean_message = 0

_anim_speed = 1
_anim_speed_ratio  = 100000
_velocity = 6

/*
_hull = 100
_hull_max = 100
_score = 0
_blue_energy = 200
_blue_energy_base = 200
_red_energy   = 200
_red_energy_base   = 200
_green_energy = 200
_green_energy_base = 200
_rgb_energy = 0
_rgb_energy_base = 200
*/


_fire_red_held_down = 0
_fire_blue_held_down = 0
_fire_green_held_down = 0

// Player ship shadow
if (global.selected_planet == global.PLANET_AURORA_LAND) {
    instance_create(obj_player_ship.x + 50, obj_player_ship.y + 50,obj_player_ship_shadow)
}

_special_weapon = 0
//if (global.player_weapon_special == global.SPECIAL_WEAPON_1) {
//    _special_weapon = instance_create(obj_player_ship.x, obj_player_ship.y - 40, obj_special_w_1)
//}


    



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (
    global.game_state == global.GAME_STATE_GAME_OVER ||
    global.game_state == global.GAME_STATE_SHIP_DESTROYED ||
    global.game_state == global.GAME_STATE_SUB_BOSS_DEFEATED ) {
    _message = ""
    exit
}

if (_count_to_clean_message == 50) {
    _count_to_clean_message = 0
    _message = ""
}

// Configures the animation speed based um delta variation;
image_speed = _anim_speed * (delta_time/_anim_speed_ratio);

// make sure 60 pfs
delta = (60/1000000) * delta_time;

// Determines velocity based on delta.
var v = _velocity * delta;

InputAndMovimentHandler(v)

// Move shadow
if (instance_exists(obj_player_ship_shadow)) {
    obj_player_ship_shadow.x = obj_player_ship.x + 50
    obj_player_ship_shadow.y = obj_player_ship.y + 50   
}

// Move special weapon
//_special_weapon.x = x
//_special_weapon.y = y - 40

// Handle collisions with enemy shot
shoot = instance_place(x,y,obj_enemy_weapon_base)
if (shoot != noone &amp;&amp; !global.test_ship_undestrutible) {
    global.player_hull -= shoot._demage
    instance_create(shoot.x, shoot.y, obj_little_explosion)
    instance_destroy(shoot)
    if (global.player_hull &lt; 0) {
        global.player_hull = 0
        SetShipExplosion()
    }
}

// collision with enemy
enemy = instance_place(x,y,obj_base_enemy)
if (enemy != noone &amp;&amp; ! enemy._is_tank &amp;&amp; !global.test_ship_undestrutible) {
    global.player_hull -= enemy._hp
    instance_create(enemy.x, enemy.y, obj_little_explosion)
    instance_destroy(enemy)
    if (global.player_hull &lt;= 0) {
        global.player_hull = 0
        SetShipExplosion()  
    }
}

// collision with drone
drone = instance_place(x,y, obj_drone_1) 
if (drone != noone &amp;&amp;!global.test_ship_undestrutible) {
    global.player_hull -= drone._demage
    instance_create(drone.x, drone.y, obj_little_explosion)
    instance_destroy(drone)
    if (global.player_hull &lt;= 0) {
        global.player_hull = 0
        SetShipExplosion()  
    }
}

// Ship is destroyed if collides with meteor
var meteor = instance_place(x,y,obj_meteor_base)
if (meteor != noone &amp;&amp; !global.test_ship_undestrutible) {
    global.player_hull = 0
    SetShipExplosion()
}

// Collision inside big ship
HandleCollisionInsideShip()

var boss = instance_place(x,y,obj_boss_base)
if (boss != noone &amp;&amp; !global.test_ship_undestrutible) {
    global.player_hull = 0
    SetShipExplosion()
}

var bolt = instance_place(x, y, obj_bolt_base)
if (bolt != noone) {
    instance_create(x, y, obj_little_explosion)
    global.player_hull -= bolt._demage
    if (global.player_hull &lt; 0) {
       global.player_hull = 0
       SetShipExplosion()
    }
}

// Collision with itens
var refil = instance_place(x,y, obj_item_red_ammo)
if (refil != noone) {
    global.player_red_energy += refil._ammo
    if (global.player_red_energy &gt; global.player_red_energy_base) {
        global.player_red_energy = global.player_red_energy_base
    }
    instance_destroy(refil)
    PlayItemSound(global.ITEM_RED_AMMO)
}
refil = instance_place(x,y, obj_item_green_ammo)
if (refil != noone) {
    global.player_green_energy += refil._ammo
    if (global.player_green_energy &gt; global.player_green_energy_base) {
        global.player_green_energy = global.player_green_energy_base
    }
    instance_destroy(refil);
    PlayItemSound(global.ITEM_GREEN_AMMO)
}

refil = instance_place(x,y, obj_item_blue_ammo)
if (refil != noone) {
    global.player_blue_energy += refil._ammo
    if (global.player_blue_energy &gt; global.player_blue_energy_base) {
        global.player_blue_energy = global.player_blue_energy_base
    }
    instance_destroy(refil);
    PlayItemSound(global.ITEM_BLUE_AMMO)
}

hul = instance_place(x,y, obj_hull_refil_20) 
if (hul != noone) {
    global.player_hull += hul._val
    if (global.player_hull &gt; global.player_hull_max) {
        global.player_hull = global.player_hull_max
    }
    instance_destroy(hul);
    PlayItemSound(global.ITEM_BLUE_AMMO)
}

// collision with weapon itens
item = instance_place(x,y, obj_item_double_laser) 
if (item) {
    _message = "Double Laser" 
    global.player_weapon = global.PLAYER_DOUBLE_LASER
    instance_destroy(item);
    PlayItemSound(global.ITEM_DOUBLE_LASER)
}

item = instance_place(x,y, obj_item_single_laser) 
if (item) {
    _message = "Single Laser" 
    global.player_weapon = global.PLAYER_SINGLE_LASER
    instance_destroy(item);
    PlayItemSound(global.ITEM_SINGLE_LASER)    
}

item = instance_place(x,y, obj_item_tri_laser) 
if (item) {
    _message = "Tri Laser" 
    global.player_weapon = global.PLAYER_TRI_LASER
    instance_destroy(item);
    PlayItemSound(global.ITEM_TRI_LASER)    
}

item = instance_place(x,y, obj_item_pursuit_laser) 
if (item) {
    _message = "Pursuit Laser" 
    global.player_weapon = global.PLAYER_PURSUIT_LASER
    instance_destroy(item);
    PlayItemSound(global.ITEM_PURSUIT_LASER)    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spt_honey_badger_explosion) {
    image_speed = 0;
    image_index = 30;
} 

/*
if (global.game_state == global.GAME_STATE_SHIP_DESTROYED) {
    if( image_index == image_number ){ // This will check if the image is the last image of the sprite
         image_speed = 0;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var centro_room_x = room_width/2;
var centro_room_y = room_height/2;

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_aqua);
draw_set_font( font_30 );

if (_message != "" ) {
    draw_text(
         centro_room_x, 
         centro_room_y - 100,
         _message
    )
   _count_to_clean_message ++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
