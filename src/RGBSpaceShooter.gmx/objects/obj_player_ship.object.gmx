<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spt_player_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_message = ""
_count_to_clean_message = 0

_anim_speed = 1
_anim_speed_ratio  = 100000
_velocity = 6

_hull = 100
_hull_max = 100

_rainbow_energy     = 0
_rainbow_energy_max = 100

_score = 0

_blue_ammo  = 200
_red_ammo   = 200
_green_ammo = 200

_fire_red_held_down = 0
_fire_blue_held_down = 0


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (
    global.game_state == global.GAME_STATE_GAME_OVER ||
    global.game_state == global.GAME_STATE_SHIP_DESTROYED ||
    global.game_state == global.GAME_STATE_SUB_BOSS_DEFEATED ) {
    _message = ""
    exit
}

if (_count_to_clean_message == 50) {
    _count_to_clean_message = 0
    _message = ""
}

// Configures the animation speed based um delta variation;
image_speed = _anim_speed * (delta_time/_anim_speed_ratio);

// make sure 60 pfs
delta = (60/1000000) * delta_time;

// Key input processing.
key_right = keyboard_check(vk_right) ;
key_left  = keyboard_check(vk_left);
key_up    = keyboard_check(vk_up);
key_down  = keyboard_check(vk_down);;

// Determines velocity based on delta.
var v = _velocity * delta;

// Moviment of ship on x axis.
var px = xprevious;
if (key_right) {
    px += v;
} else if (key_left) {
    px -= v;
}
if (px &gt; 0 &amp;&amp; px &lt;= room_width) {
    x = px;
}

// Calculate the first and the last value of x to prevent the ship goes offscreen.
x = clamp(x, 0 + sprite_width/2, room_width - sprite_width/2);

// Moviment of ship on y axis.
var py = yprevious;
if (key_up) {
    py -= v;
} else if (key_down) {
    py += v;
}
if (py &gt; 0 &amp;&amp; py &lt;= room_height) y = py;


// Handle collisions with enemy shot
shoot = instance_place(x,y,obj_enemy_weapon_base)
if (shoot != noone) {
    _hull -= shoot._demage
    instance_create(shoot.x, shoot.y, obj_little_explosion)
    instance_destroy(shoot)
    show_debug_message("Ship Hull:" + string(_hull));
    
    // Ship destroyed
    if (_hull &lt; 0) {
        _hull = 0
        SetShipExplosion()
    }
}

// Ship is destroyed if collides with meteor or other ship
enemy = instance_place(x,y,obj_base_enemy)
if (enemy != noone) {
    _hull = 0
    SetShipExplosion()
}

meteor = instance_place(x,y,obj_meteor_base)
if (meteor != noone) {
    _hull = 0
    SetShipExplosion()
}

// Calculate the first and the last value of y to prevent the ship goes offscreen.
y = clamp(y, 0 + sprite_height/2, room_height - sprite_height/2);

key_fire_red     = keyboard_check_pressed(ord('A'))
key_fire_green   = keyboard_check_pressed(ord('S'))
key_fire_blue    = keyboard_check_pressed(ord('D'))
key_fire_special = keyboard_check_pressed(ord('X'))

// exit condition: all keys pressed
if (
        (key_fire_red &amp;&amp; key_fire_green &amp;&amp; key_fire_blue)
        || (key_fire_red &amp;&amp; key_fire_green) 
        || (key_fire_red &amp;&amp; key_fire_blue)
        || (key_fire_green &amp;&amp; key_fire_blue)
       ) { exit } 

// Held down red fire key
if keyboard_check(ord('A')) {
    show_debug_message("Key A held down")
    _fire_red_held_down ++
    if (_fire_red_held_down &gt; 20 &amp;&amp; _red_ammo &gt; 0) {
        instance_create(x-25, y + irandom_range(1,5), obj_red_fire_concetrate)
        instance_create(x+25, y + irandom_range(1,5), obj_red_fire_concetrate)
        if (_red_ammo &gt; 0) {
            _red_ammo --
        }    
        exit
    }
} else {
    _fire_red_held_down = 0
    instance_destroy(obj_red_fire_concetrate)
}

// Held down blue fire key
if keyboard_check(ord('D')) {
    show_debug_message("Key D held down")
    _fire_blue_held_down ++
    if (_fire_blue_held_down &gt; 20 &amp;&amp; _blue_ammo &gt; 0) {
        instance_create(x-25, y + irandom_range(1,5), obj_blue_fire_concetrate)
        instance_create(x+25, y + irandom_range(1,5), obj_blue_fire_concetrate)
        if (_blue_ammo &gt; 0) {
           _blue_ammo --
        }
        exit
    }
} else {
    _fire_blue_held_down = 0
    instance_destroy(obj_blue_fire_concetrate)
}

// Held down green fire key
if keyboard_check(ord('S')) {
    show_debug_message("Key S held down")
    _fire_green_held_down ++
    if (_fire_green_held_down &gt; 20) {
        instance_create(x-25, y + irandom_range(1,5), obj_green_fire_concetrate)
        instance_create(x+25, y + irandom_range(1,5), obj_green_fire_concetrate)
        _green_ammo --
        exit
    }
} else {
    _fire_green_held_down = 0
    instance_destroy(obj_green_fire_concetrate)
}

// Fire
var fire_cost = 1;
if (key_fire_red &amp;&amp; _red_ammo &gt; 0) {
    if (global.player_weapon == global.PLAYER_SINGLE_LASER) {
        instance_create(x, y - 60, obj_red_laser)
    }
    if (global.player_weapon == global.PLAYER_DOUBLE_LASER) {
        instance_create(x-25, y + irandom_range(1,5), obj_red_laser)
        instance_create(x+25, y + irandom_range(1,5), obj_red_laser)
        fire_cost = 2
    }
    if (global.player_weapon == global.PLAYER_TRI_LASER) {
        instance_create(x, y - 60, obj_red_laser)
        ml = instance_create(x-45, y + 15, obj_red_laser)
        mr = instance_create(x+45, y + 15, obj_red_laser)
        ml._move_left = true
        mr._move_right = true
        fire_cost = 3
    }
    _red_ammo -= fire_cost;
    if (_red_ammo &lt; 0) {
        _red_ammo = 0
    }
}
if (key_fire_green &amp;&amp; _green_ammo &gt; 0) {
    if (global.player_weapon == global.PLAYER_SINGLE_LASER) {
        instance_create(x, y - 60, obj_green_laser)
    }
    if (global.player_weapon == global.PLAYER_DOUBLE_LASER) {
        instance_create(x-25, y + irandom_range(1,5), obj_green_laser)
        instance_create(x+25, y + irandom_range(1,5), obj_green_laser)
        fire_cost = 2
    }
    if (global.player_weapon == global.PLAYER_TRI_LASER) {
        instance_create(x, y - 60, obj_green_laser)
        ml = instance_create(x-45, y + 15, obj_green_laser)
        mr = instance_create(x+45, y + 15, obj_green_laser)
        ml._move_left = true
        mr._move_right = true
        fire_cost = 3
    }
    _green_ammo -= fire_cost;
    if (_green_ammo &lt; 0) {
        _green_ammo = 0
    }
}
if (key_fire_blue &amp;&amp; _blue_ammo &gt; 0) {
    if (global.player_weapon == global.PLAYER_SINGLE_LASER) {
        instance_create(x, y - 60, obj_blue_laser)
    }
    if (global.player_weapon == global.PLAYER_DOUBLE_LASER) {
        instance_create(x-25, y + irandom_range(1,5), obj_blue_laser)
        instance_create(x+25, y + irandom_range(1,5), obj_blue_laser)
        fire_cost = 2
    }
    if (global.player_weapon == global.PLAYER_TRI_LASER) {
        instance_create(x, y - 60, obj_blue_laser)
        ml = instance_create(x-45, y + 15, obj_blue_laser)
        mr = instance_create(x+45, y + 15, obj_blue_laser)
        ml._move_left = true
        mr._move_right = true
        fire_cost = 3
    }
    _blue_ammo -= fire_cost;
    if (_blue_ammo &lt; 0) {
        _blue_ammo = 0
    }
}

// Collision with itens
var refil = instance_place(x,y, obj_item_red_ammo)
if (refil != noone) {
    _red_ammo += refil._ammo
    if (_red_ammo &gt; 200) {
        _red_ammo = 200
    }
    instance_destroy(refil)
}
refil = instance_place(x,y, obj_item_green_ammo)
if (refil != noone) {
    _green_ammo += refil._ammo
    if (_green_ammo &gt; 200) {
        _green_ammo = 200
    }
    instance_destroy(refil);
}
refil = instance_place(x,y, obj_item_blue_ammo)
if (refil != noone) {
    _blue_ammo += refil._ammo
    if (_blue_ammo &gt; 200) {
        _blue_ammo = 200
    }
    instance_destroy(refil);
}

// collision with weapon itens
double_laser = instance_place(x,y, obj_item_double_laser) 
if (double_laser) {
    _message = "Double Laser" 
    global.player_weapon = global.PLAYER_DOUBLE_LASER
    instance_destroy(double_laser);
}

single_laser = instance_place(x,y, obj_item_single_laser) 
if (single_laser) {
    _message = "Single Laser" 
    global.player_weapon = global.PLAYER_SINGLE_LASER
    instance_destroy(single_laser);
}

tri_laser = instance_place(x,y, obj_item_tri_laser) 
if (tri_laser) {
    _message = "Tri Laser" 
    global.player_weapon = global.PLAYER_TRI_LASER
    instance_destroy(tri_laser);
}

// Special weapon fired
if (key_fire_special) {
    if (_rainbow_energy &lt;= 0) {
        exit
    }    
    switch (global.player_weapon_special) {
        case global.SPECIAL_WEAPON_1:
            var weapon = instance_create(x,y-20, obj_special_weapon_1_fire)
            _rainbow_energy =  _rainbow_energy - weapon._cost
            if (_rainbow_energy &lt;=0) {
                _rainbow_energy = 0
            }
    }        
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spt_player_ship_explosion) {
    image_speed = 0;
    image_index = 5;
} 

/*
if (global.game_state == global.GAME_STATE_SHIP_DESTROYED) {
    if( image_index == image_number ){ // This will check if the image is the last image of the sprite
         image_speed = 0;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var centro_room_x = room_width/2;
var centro_room_y = room_height/2;

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_aqua);
draw_set_font( font_30 );

if (_message != "" ) {
    draw_text(
         centro_room_x, 
         centro_room_y - 100,
         _message
    )
   _count_to_clean_message ++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
