<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_velocity = 12
_demage = 8

_move_right = false
_move_left = false
_found_enemy = false

if (global.test_super_hit) {
    _demage = 1000
}

_color = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handle collision with barrier
var barrier = instance_place(x, y, obj_barrier_1) 
if (barrier != noone) {
    instance_create(barrier.x, barrier.y, obj_little_explosion)
    instance_destroy()
}

// Handle collision with meteor.
var enemy = instance_place(x,y, obj_meteor_base)
if (enemy) {
    instance_create(x, y, obj_little_explosion)
    instance_destroy()
}

// Handle collision with energy bar.
var enemy = instance_place(x,y, obj_dead_energy_bar)
if (enemy) {
    instance_create(x, y, obj_little_explosion)
    instance_destroy()
}

// Handle collision with Boss force field
var laser = instance_place(x, y, obj_boss_force_field)
if (laser) {
    instance_create(x, y, obj_little_explosion)
    instance_destroy()
}

// Handle collision with white enemy, can be destroy by any laser
enemy = instance_place(x,y, obj_base_enemy)
if (enemy != noone &amp;&amp; enemy._is_cargo_ship) {
    instance_create(x, y, obj_little_explosion)
    enemy._hp -= _demage
    global.player_score += enemy._points
    if (enemy._hp &lt; 0) {
        instance_destroy(enemy)
        GenerateCargoItem(x,y)
    }  
    instance_destroy()
}

enemy = instance_place(x,y, obj_armored_drone)
if (enemy != noone &amp;&amp; enemy._is_unbreakable) {
    instance_create(x, y, obj_little_explosion)
    instance_destroy()
}

// Handle collision with drone
enemy = instance_place(x,y, obj_base_enemy)
if (enemy != noone &amp;&amp; enemy._is_drone) {
    global.player_score += enemy._points
    instance_create(x, y, obj_little_explosion)
    enemy._hp -= _demage
    if (enemy._hp &lt; 0) {
        instance_destroy(enemy)
    }  
    instance_destroy()
}

// Handle collision with moving engine
enemy = instance_place(x,y, obj_moving_engine_base)
if (enemy != noone) {
    instance_create(x, y, obj_little_explosion)
    instance_destroy()
}

// Handle collisin with splace lab boss p2
enemy = instance_place(x,y, obj_boss_space_lab_p2)
if (enemy != noone) {
    instance_create(x, y, obj_little_explosion)
    instance_destroy()
}


// Calculates y position based on delta to make smoother moviment.
delta = (60/1000000) * delta_time;

// Move the bullet to the energy absorver
if (instance_exists(obj_base_energy_absorver)) {
    switch(_color) {
        case global.RED:
            if (distance_to_object(obj_red_energy_absorver)&lt;100) {
                move_towards_point(obj_red_energy_absorver.x, obj_red_energy_absorver.y, _velocity);    
            } else {
                y -= _velocity * delta;
            }
            break;
        case global.GREEN:
            if (distance_to_object(obj_green_energy_absorver)&lt;100) {
                move_towards_point(obj_green_energy_absorver.x, obj_green_energy_absorver.y, _velocity);    
            } else {
                y -= _velocity * delta;
            }
            break;
        case global.BLUE:
            if (distance_to_object(obj_blue_energy_absorver)&lt;100) {
                move_towards_point(obj_blue_energy_absorver.x, obj_blue_energy_absorver.y, _velocity);  
            } else {
                y -= _velocity * delta;
            }
            break;      
    }
    exit
}

// if is pursuit laser goes to nerby enemy
if (global.player_weapon == global.PLAYER_PURSUIT_LASER) {
    if (! _found_enemy) {
        y -= _velocity * delta;
    }
    if (instance_exists(obj_base_enemy)) {
        var d = point_distance(x, y, obj_base_enemy.x, obj_base_enemy.y)
        if (d &lt; 500) {
            move_towards_point(obj_base_enemy.x, obj_base_enemy.y, _velocity);
            _found_enemy = true
        } else {
            _found_enemy = false
        }
    }
    if (instance_exists(obj_boss_base)) {
        var d = point_distance(x, y, obj_boss_base.x, obj_boss_base.y)
        if (d &lt; 500) {
            move_towards_point(obj_boss_base.x, obj_boss_base.y, _velocity);
            _found_enemy = true
        } else {
            _found_enemy = false
        }
    }
} else {
    if ( ! _move_right &amp;&amp; ! _move_left) {
        y -= _velocity * delta;
    }
    if (_move_right) {
        x -= _velocity * delta;
    }
    if (_move_left) {
        x += _velocity * delta;
    }
}

if (y &lt; -5) instance_destroy();
if (x &lt; 0) instance_destroy()
if (x &gt; room_width) instance_destroy()




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
